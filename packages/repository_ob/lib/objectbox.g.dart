// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/expiration_date.ob.dart';
import 'model/household_member.ob.dart';
import 'model/identifier.ob.dart';
import 'model/inventory.ob.dart';
import 'model/item.ob.dart';
import 'model/location.ob.dart';
import 'model/manufacturer.ob.dart';
import 'model/product.ob.dart';
import 'model/receipt_item.ob.dart';
import 'model/shopping_item.ob.dart';
import 'model_custom/history_ob.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(12, 8845027561250741274),
      name: 'ObjectBoxHistory',
      lastPropertyId: const IdUid(4, 1410544969885562863),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5930073436429162412),
            name: 'upc',
            type: 9,
            flags: 34848,
            indexId: const IdUid(4, 1380383612824248493)),
        ModelProperty(
            id: const IdUid(3, 8507136725000371231),
            name: 'dbHistory',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1410544969885562863),
            name: 'objectBoxId',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(22, 4012899901862137920),
      name: 'ObjectBoxShoppingItem',
      lastPropertyId: const IdUid(3, 7388475517061537137),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8628836329229902645),
            name: 'upc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 820201786847802226),
            name: 'checked',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7388475517061537137),
            name: 'objectBoxId',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(23, 5617203716368242690),
      name: 'ObjectBoxExpirationDate',
      lastPropertyId: const IdUid(6, 5009941825621756222),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6579026378944887639),
            name: 'upc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 831465275208694872),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5465059172932761958),
            name: 'objectBoxId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(5, 5181857221685227228),
            name: 'updated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5009941825621756222),
            name: 'expirationDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(24, 3630768207355311219),
      name: 'ObjectBoxHouseholdMember',
      lastPropertyId: const IdUid(9, 1031915927988039123),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3568069331178267087),
            name: 'isAdmin',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4208617638673170285),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 966255402964899452),
            name: 'householdId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 9133962073779190726),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 877315598077878698),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 290023497277431132),
            name: 'objectBoxId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(8, 6834475930770929319),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1031915927988039123),
            name: 'updated',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(25, 1511122922272980926),
      name: 'ObjectBoxInventory',
      lastPropertyId: const IdUid(10, 6814295420645616934),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6596094317940506748),
            name: 'amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 4816689250536618732),
            name: 'unitCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8432369276528276973),
            name: 'lastUpdate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1978609951305768243),
            name: 'locations',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1431437387687628276),
            name: 'restock',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3241574036404653701),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 990711167040717612),
            name: 'objectBoxId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(8, 886880915940834802),
            name: 'dbExpirationDates',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4713759987857363154),
            name: 'dbLastUpdate',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6814295420645616934),
            name: 'upc',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(26, 3164051957900951727),
      name: 'ObjectBoxItem',
      lastPropertyId: const IdUid(16, 7855442706897693439),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7287175140036427301),
            name: 'upc',
            type: 9,
            flags: 34848,
            indexId: const IdUid(10, 1425598012937126193)),
        ModelProperty(
            id: const IdUid(3, 211053890509625994),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4494473553475034225),
            name: 'variety',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6328966243408085845),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4162491639111332433),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6196793968835640231),
            name: 'typeId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2845428131231157014),
            name: 'unitCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6563123697625444326),
            name: 'unitName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6725266228359140838),
            name: 'unitPlural',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 2260494015855780164),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3497041783885935618),
            name: 'consumable',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 7470005932937188047),
            name: 'languageCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5133401553044031820),
            name: 'lastUpdate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 7642552518931337978),
            name: 'objectBoxId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(16, 7855442706897693439),
            name: 'uid',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(27, 3953219533055125616),
      name: 'ObjectBoxItemTranslation',
      lastPropertyId: const IdUid(8, 5584264251070601548),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7267860042502112182),
            name: 'upc',
            type: 9,
            flags: 34848,
            indexId: const IdUid(11, 4213499292565708475)),
        ModelProperty(
            id: const IdUid(2, 6831898407583824697),
            name: 'languageCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3321971117874646334),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1749363856361136304),
            name: 'variety',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8341800374486486828),
            name: 'unitName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6233360154769207932),
            name: 'unitPlural',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 368772676665533836),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5584264251070601548),
            name: 'objectBoxId',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(28, 8452859501085368152),
      name: 'ObjectBoxLocation',
      lastPropertyId: const IdUid(6, 1606338988648457034),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7778399611768914868),
            name: 'upc',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 3931233900844926608),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6486463482966279403),
            name: 'quantity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 409416015550685976),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2931319557728573164),
            name: 'updated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1606338988648457034),
            name: 'objectBoxId',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(29, 581262129450401551),
      name: 'ObjectBoxManufacturer',
      lastPropertyId: const IdUid(6, 8001868185928218441),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3907810617333759869),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 2180541031118710814),
            name: 'website',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2449045938527716013),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1175724246066708815),
            name: 'parentName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2124781155255253470),
            name: 'parentUid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8001868185928218441),
            name: 'objectBoxId',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(30, 8399465274193556283),
      name: 'ObjectBoxProduct',
      lastPropertyId: const IdUid(7, 4464046311116010674),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7426609939866308802),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 6462919763886991225),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4297826609406557658),
            name: 'manufacturer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3500616642506890172),
            name: 'manufacturerUid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 492727764829979964),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4898767467596893260),
            name: 'upcs',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4464046311116010674),
            name: 'objectBoxId',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(31, 6926162432641687423),
      name: 'ObjectBoxItemIdentifier',
      lastPropertyId: const IdUid(6, 8586240948035121702),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5410678726010478738),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 1807663967015945579),
            name: 'value',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9036243146704884821),
            name: 'uid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8711475091176549077),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6323250953147892719),
            name: 'updated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8586240948035121702),
            name: 'objectBoxId',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(32, 2424801468099308795),
      name: 'ObjectBoxReceiptItem',
      lastPropertyId: const IdUid(8, 4540687088627323783),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1409804839355144907),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 4901825100975296988),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4555738625603270309),
            name: 'regularPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6561748397873684137),
            name: 'quantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 310986992928624842),
            name: 'barcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7816061209567866527),
            name: 'taxable',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7920296738618385040),
            name: 'bottleDeposit',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4540687088627323783),
            name: 'objectBoxId',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(32, 2424801468099308795),
      lastIndexId: const IdUid(11, 4213499292565708475),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        8566586954295585920,
        8424580053237053064,
        4409076866089830057,
        6867336823909880876,
        2032575102652478660,
        5035609981372595064,
        3723209419512490517,
        36458029675643691,
        9026109327750919290,
        4961829832959724808,
        2251611335733283142,
        1611655272336628852,
        9117861105543333030,
        7428099248268805432,
        2743826058802040572,
        2183662866210831935,
        6355597710876493410,
        8501125382873435329,
        6997640042144843407,
        3255552557810191530
      ],
      retiredIndexUids: const [8142794481267609707],
      retiredPropertyUids: const [
        57279646016854868,
        2023568673810575159,
        5921365200784546926,
        7056314024111135425,
        3839357041238075661,
        2230598806361440995,
        3461574675591501780,
        4328936514420287378,
        4796539028836325964,
        6997836372642423144,
        5952406950301158294,
        3355537275434974339,
        1052702354648483711,
        4124202752757832297,
        4918676773470177501,
        3063150938887394804,
        8096728495852615076,
        6386881952248259748,
        2097527918487075803,
        5026288376565790065,
        6040227891217577961,
        2915645506796281321,
        2461830532801570432,
        1856176597008648871,
        3916459574677260029,
        3856679234313991003,
        5719439178890724680,
        8607650824692377265,
        6104661389077328605,
        829680582109422048,
        4025734358697509889,
        1728930760721481711,
        6915659985871251568,
        5080861922992731976,
        1667797658952104342,
        4642552144884560139,
        7786677029272803752,
        8357713899618901105,
        7559738479188885525,
        7421044316369511788,
        8899963707085719829,
        4539762830081980506,
        1842500871581494976,
        7635499233144786521,
        6152067401598642879,
        8684262891863985734,
        2800481630876756137,
        3751483311440047393,
        3032133473879599968,
        5421981205332139083,
        5761433883833081952,
        5902732368597070142,
        5642870310487826339,
        8862873893397617478,
        7387687423856593037,
        2028156149330326041,
        1103960621444936317,
        5207382650981158992,
        3049551101808332660,
        8898497516433519050,
        6575382785729127895,
        3045175981976767442,
        4738601771660428828,
        9191167413262940472,
        1962250420156656810,
        8456053334622007497,
        4224742095922657995,
        6745209600142358059,
        491023906510423633,
        6833677880252569975,
        341902253459249865,
        6372715835582080505,
        8962671851432199895,
        534853850960335020,
        7857370170966890870,
        4027347905943055975,
        969651414277014105,
        7669460921779526709,
        9143953678226152578,
        2392538050400575422,
        8569655026787145499,
        6452788457756566678,
        4714831988172942167,
        3745727551011118418,
        5003022832811822058,
        9056680913246608197,
        8684653693421107758,
        5192325408638624988,
        5760270407873770334,
        5897877644328943369,
        8210873934856385730,
        6880088959244528271,
        4408203996444102651,
        7946806435019515615,
        7448301853841625850,
        4143090653879973508,
        7056447120328768215,
        6388154415577016172,
        4209418296281574048,
        6178227767178788053,
        1063075903001110635,
        7818500068996145284,
        8957439855027803910,
        9076724273805061677,
        6899021128483393415,
        1115647715285200717,
        893804246152415796,
        2920156935710059380,
        6175421043226721665,
        6972730156399653636,
        5327912492728875812,
        6728416846686828406,
        283520272498643630,
        957661081092618053,
        2477605786470080913,
        563120090522239608,
        2677045677771164418,
        2218455768959677665,
        2320097251911814411,
        4243342055390721375,
        8750205013675183738,
        6176841570395132493,
        8682336750676568002,
        4359941432476552937,
        4577600509295133427,
        3618722309383559273,
        5207115531357652064,
        2174772148580454816,
        189495645213970810,
        920624336766919493,
        8027817434216091028,
        9125561795024444450,
        1058588288007546192,
        7608776388611083432,
        1213347897950107873,
        596113066098669458,
        3965590369990621244,
        7543468242257706711,
        592784928820256951
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ObjectBoxHistory: EntityDefinition<ObjectBoxHistory>(
        model: _entities[0],
        toOneRelations: (ObjectBoxHistory object) => [],
        toManyRelations: (ObjectBoxHistory object) => {},
        getId: (ObjectBoxHistory object) => object.objectBoxId,
        setId: (ObjectBoxHistory object, int id) {
          object.objectBoxId = id;
        },
        objectToFB: (ObjectBoxHistory object, fb.Builder fbb) {
          final upcOffset = fbb.writeString(object.upc);
          final dbHistoryOffset = fbb.writeString(object.dbHistory);
          fbb.startTable(5);
          fbb.addOffset(0, upcOffset);
          fbb.addOffset(2, dbHistoryOffset);
          fbb.addInt64(3, object.objectBoxId);
          fbb.finish(fbb.endTable());
          return object.objectBoxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxHistory()
            ..upc = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 4, '')
            ..dbHistory = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..objectBoxId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);

          return object;
        }),
    ObjectBoxShoppingItem: EntityDefinition<ObjectBoxShoppingItem>(
        model: _entities[1],
        toOneRelations: (ObjectBoxShoppingItem object) => [],
        toManyRelations: (ObjectBoxShoppingItem object) => {},
        getId: (ObjectBoxShoppingItem object) => object.objectBoxId,
        setId: (ObjectBoxShoppingItem object, int id) {
          object.objectBoxId = id;
        },
        objectToFB: (ObjectBoxShoppingItem object, fb.Builder fbb) {
          final upcOffset = fbb.writeString(object.upc);
          fbb.startTable(4);
          fbb.addOffset(0, upcOffset);
          fbb.addBool(1, object.checked);
          fbb.addInt64(2, object.objectBoxId);
          fbb.finish(fbb.endTable());
          return object.objectBoxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxShoppingItem()
            ..upc = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 4, '')
            ..checked =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false)
            ..objectBoxId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);

          return object;
        }),
    ObjectBoxExpirationDate: EntityDefinition<ObjectBoxExpirationDate>(
        model: _entities[2],
        toOneRelations: (ObjectBoxExpirationDate object) => [],
        toManyRelations: (ObjectBoxExpirationDate object) => {},
        getId: (ObjectBoxExpirationDate object) => object.objectBoxId,
        setId: (ObjectBoxExpirationDate object, int id) {
          object.objectBoxId = id;
        },
        objectToFB: (ObjectBoxExpirationDate object, fb.Builder fbb) {
          final upcOffset = fbb.writeString(object.upc);
          fbb.startTable(7);
          fbb.addOffset(0, upcOffset);
          fbb.addInt64(2, object.created?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.objectBoxId);
          fbb.addInt64(4, object.updated?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.expirationDate?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectBoxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final updatedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final expirationDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = ObjectBoxExpirationDate()
            ..upc = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 4, '')
            ..created = createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue)
            ..objectBoxId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..updated = updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue)
            ..expirationDate = expirationDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(expirationDateValue);

          return object;
        }),
    ObjectBoxHouseholdMember: EntityDefinition<ObjectBoxHouseholdMember>(
        model: _entities[3],
        toOneRelations: (ObjectBoxHouseholdMember object) => [],
        toManyRelations: (ObjectBoxHouseholdMember object) => {},
        getId: (ObjectBoxHouseholdMember object) => object.objectBoxId,
        setId: (ObjectBoxHouseholdMember object, int id) {
          object.objectBoxId = id;
        },
        objectToFB: (ObjectBoxHouseholdMember object, fb.Builder fbb) {
          final emailOffset = fbb.writeString(object.email);
          final householdIdOffset = fbb.writeString(object.householdId);
          final nameOffset = fbb.writeString(object.name);
          final userIdOffset = fbb.writeString(object.userId);
          fbb.startTable(10);
          fbb.addBool(0, object.isAdmin);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, householdIdOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, userIdOffset);
          fbb.addInt64(6, object.objectBoxId);
          fbb.addInt64(7, object.created?.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updated?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.objectBoxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final updatedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final object = ObjectBoxHouseholdMember()
            ..isAdmin =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 4, false)
            ..email = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..householdId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..userId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..objectBoxId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..created = createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue)
            ..updated = updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue);

          return object;
        }),
    ObjectBoxInventory: EntityDefinition<ObjectBoxInventory>(
        model: _entities[4],
        toOneRelations: (ObjectBoxInventory object) => [],
        toManyRelations: (ObjectBoxInventory object) => {},
        getId: (ObjectBoxInventory object) => object.objectBoxId,
        setId: (ObjectBoxInventory object, int id) {
          object.objectBoxId = id;
        },
        objectToFB: (ObjectBoxInventory object, fb.Builder fbb) {
          final locationsOffset = fbb.writeList(
              object.locations.map(fbb.writeString).toList(growable: false));
          final uidOffset = fbb.writeString(object.uid);
          final dbExpirationDatesOffset = fbb.writeList(object.dbExpirationDates
              .map(fbb.writeString)
              .toList(growable: false));
          final upcOffset = fbb.writeString(object.upc);
          fbb.startTable(11);
          fbb.addFloat64(0, object.amount);
          fbb.addInt64(1, object.unitCount);
          fbb.addInt64(2, object.lastUpdate?.millisecondsSinceEpoch);
          fbb.addOffset(3, locationsOffset);
          fbb.addBool(4, object.restock);
          fbb.addOffset(5, uidOffset);
          fbb.addInt64(6, object.objectBoxId);
          fbb.addOffset(7, dbExpirationDatesOffset);
          fbb.addInt64(8, object.dbLastUpdate);
          fbb.addOffset(9, upcOffset);
          fbb.finish(fbb.endTable());
          return object.objectBoxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastUpdateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = ObjectBoxInventory()
            ..amount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..unitCount =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..lastUpdate = lastUpdateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(lastUpdateValue)
            ..locations = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 10, [])
            ..restock =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false)
            ..uid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..objectBoxId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..dbExpirationDates = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 18, [])
            ..dbLastUpdate =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)
            ..upc = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '');

          return object;
        }),
    ObjectBoxItem: EntityDefinition<ObjectBoxItem>(
        model: _entities[5],
        toOneRelations: (ObjectBoxItem object) => [],
        toManyRelations: (ObjectBoxItem object) => {},
        getId: (ObjectBoxItem object) => object.objectBoxId,
        setId: (ObjectBoxItem object, int id) {
          object.objectBoxId = id;
        },
        objectToFB: (ObjectBoxItem object, fb.Builder fbb) {
          final upcOffset = fbb.writeString(object.upc);
          final nameOffset = fbb.writeString(object.name);
          final varietyOffset = fbb.writeString(object.variety);
          final categoryOffset = fbb.writeString(object.category);
          final typeOffset = fbb.writeString(object.type);
          final typeIdOffset = fbb.writeString(object.typeId);
          final unitNameOffset = fbb.writeString(object.unitName);
          final unitPluralOffset = fbb.writeString(object.unitPlural);
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          final languageCodeOffset = fbb.writeString(object.languageCode);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(17);
          fbb.addOffset(0, upcOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, varietyOffset);
          fbb.addOffset(4, categoryOffset);
          fbb.addOffset(5, typeOffset);
          fbb.addOffset(6, typeIdOffset);
          fbb.addInt64(7, object.unitCount);
          fbb.addOffset(8, unitNameOffset);
          fbb.addOffset(9, unitPluralOffset);
          fbb.addOffset(10, imageUrlOffset);
          fbb.addBool(11, object.consumable);
          fbb.addOffset(12, languageCodeOffset);
          fbb.addInt64(13, object.lastUpdate?.millisecondsSinceEpoch);
          fbb.addInt64(14, object.objectBoxId);
          fbb.addOffset(15, uidOffset);
          fbb.finish(fbb.endTable());
          return object.objectBoxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastUpdateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final object = ObjectBoxItem()
            ..upc = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 4, '')
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..variety = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..category = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..type = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..typeId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..unitCount =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..unitName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..unitPlural = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '')
            ..imageUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 24, '')
            ..consumable =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false)
            ..languageCode = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 28, '')
            ..lastUpdate = lastUpdateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(lastUpdateValue)
            ..objectBoxId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0)
            ..uid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 34, '');

          return object;
        }),
    ObjectBoxItemTranslation: EntityDefinition<ObjectBoxItemTranslation>(
        model: _entities[6],
        toOneRelations: (ObjectBoxItemTranslation object) => [],
        toManyRelations: (ObjectBoxItemTranslation object) => {},
        getId: (ObjectBoxItemTranslation object) => object.objectBoxId,
        setId: (ObjectBoxItemTranslation object, int id) {
          object.objectBoxId = id;
        },
        objectToFB: (ObjectBoxItemTranslation object, fb.Builder fbb) {
          final upcOffset = fbb.writeString(object.upc);
          final languageCodeOffset = fbb.writeString(object.languageCode);
          final nameOffset = fbb.writeString(object.name);
          final varietyOffset = fbb.writeString(object.variety);
          final unitNameOffset = fbb.writeString(object.unitName);
          final unitPluralOffset = fbb.writeString(object.unitPlural);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(9);
          fbb.addOffset(0, upcOffset);
          fbb.addOffset(1, languageCodeOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, varietyOffset);
          fbb.addOffset(4, unitNameOffset);
          fbb.addOffset(5, unitPluralOffset);
          fbb.addOffset(6, typeOffset);
          fbb.addInt64(7, object.objectBoxId);
          fbb.finish(fbb.endTable());
          return object.objectBoxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxItemTranslation()
            ..upc = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 4, '')
            ..languageCode = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..variety = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..unitName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..unitPlural = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..type = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..objectBoxId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);

          return object;
        }),
    ObjectBoxLocation: EntityDefinition<ObjectBoxLocation>(
        model: _entities[7],
        toOneRelations: (ObjectBoxLocation object) => [],
        toManyRelations: (ObjectBoxLocation object) => {},
        getId: (ObjectBoxLocation object) => object.objectBoxId,
        setId: (ObjectBoxLocation object, int id) {
          object.objectBoxId = id;
        },
        objectToFB: (ObjectBoxLocation object, fb.Builder fbb) {
          final upcOffset = fbb.writeString(object.upc);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addOffset(0, upcOffset);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.quantity);
          fbb.addInt64(3, object.created?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updated?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.objectBoxId);
          fbb.finish(fbb.endTable());
          return object.objectBoxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final updatedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = ObjectBoxLocation()
            ..upc = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 4, '')
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..quantity = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 8)
            ..created = createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue)
            ..updated = updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue)
            ..objectBoxId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);

          return object;
        }),
    ObjectBoxManufacturer: EntityDefinition<ObjectBoxManufacturer>(
        model: _entities[8],
        toOneRelations: (ObjectBoxManufacturer object) => [],
        toManyRelations: (ObjectBoxManufacturer object) => {},
        getId: (ObjectBoxManufacturer object) => object.objectBoxId,
        setId: (ObjectBoxManufacturer object, int id) {
          object.objectBoxId = id;
        },
        objectToFB: (ObjectBoxManufacturer object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final websiteOffset = fbb.writeString(object.website);
          final uidOffset = fbb.writeString(object.uid);
          final parentNameOffset = fbb.writeString(object.parentName);
          final parentUidOffset = fbb.writeString(object.parentUid);
          fbb.startTable(7);
          fbb.addOffset(0, nameOffset);
          fbb.addOffset(1, websiteOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addOffset(3, parentNameOffset);
          fbb.addOffset(4, parentUidOffset);
          fbb.addInt64(5, object.objectBoxId);
          fbb.finish(fbb.endTable());
          return object.objectBoxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxManufacturer()
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 4, '')
            ..website = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..uid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..parentName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..parentUid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..objectBoxId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);

          return object;
        }),
    ObjectBoxProduct: EntityDefinition<ObjectBoxProduct>(
        model: _entities[9],
        toOneRelations: (ObjectBoxProduct object) => [],
        toManyRelations: (ObjectBoxProduct object) => {},
        getId: (ObjectBoxProduct object) => object.objectBoxId,
        setId: (ObjectBoxProduct object, int id) {
          object.objectBoxId = id;
        },
        objectToFB: (ObjectBoxProduct object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final uidOffset = fbb.writeString(object.uid);
          final manufacturerOffset = fbb.writeString(object.manufacturer);
          final manufacturerUidOffset = fbb.writeString(object.manufacturerUid);
          final categoryOffset = fbb.writeString(object.category);
          final upcsOffset = fbb.writeList(
              object.upcs.map(fbb.writeString).toList(growable: false));
          fbb.startTable(8);
          fbb.addOffset(0, nameOffset);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, manufacturerOffset);
          fbb.addOffset(3, manufacturerUidOffset);
          fbb.addOffset(4, categoryOffset);
          fbb.addOffset(5, upcsOffset);
          fbb.addInt64(6, object.objectBoxId);
          fbb.finish(fbb.endTable());
          return object.objectBoxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxProduct()
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 4, '')
            ..uid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..manufacturer = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..manufacturerUid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..category = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..upcs = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 14, [])
            ..objectBoxId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);

          return object;
        }),
    ObjectBoxItemIdentifier: EntityDefinition<ObjectBoxItemIdentifier>(
        model: _entities[10],
        toOneRelations: (ObjectBoxItemIdentifier object) => [],
        toManyRelations: (ObjectBoxItemIdentifier object) => {},
        getId: (ObjectBoxItemIdentifier object) => object.objectBoxId,
        setId: (ObjectBoxItemIdentifier object, int id) {
          object.objectBoxId = id;
        },
        objectToFB: (ObjectBoxItemIdentifier object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final valueOffset = fbb.writeString(object.value);
          final uidOffset = fbb.writeString(object.uid);
          fbb.startTable(7);
          fbb.addOffset(0, typeOffset);
          fbb.addOffset(1, valueOffset);
          fbb.addOffset(2, uidOffset);
          fbb.addInt64(3, object.created?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updated?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.objectBoxId);
          fbb.finish(fbb.endTable());
          return object.objectBoxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final updatedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = ObjectBoxItemIdentifier()
            ..type = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 4, '')
            ..value = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..uid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..created = createdValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdValue)
            ..updated = updatedValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedValue)
            ..objectBoxId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);

          return object;
        }),
    ObjectBoxReceiptItem: EntityDefinition<ObjectBoxReceiptItem>(
        model: _entities[11],
        toOneRelations: (ObjectBoxReceiptItem object) => [],
        toManyRelations: (ObjectBoxReceiptItem object) => {},
        getId: (ObjectBoxReceiptItem object) => object.objectBoxId,
        setId: (ObjectBoxReceiptItem object, int id) {
          object.objectBoxId = id;
        },
        objectToFB: (ObjectBoxReceiptItem object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final barcodeOffset = fbb.writeString(object.barcode);
          fbb.startTable(9);
          fbb.addOffset(0, nameOffset);
          fbb.addFloat64(1, object.price);
          fbb.addFloat64(2, object.regularPrice);
          fbb.addInt64(3, object.quantity);
          fbb.addOffset(4, barcodeOffset);
          fbb.addBool(5, object.taxable);
          fbb.addFloat64(6, object.bottleDeposit);
          fbb.addInt64(7, object.objectBoxId);
          fbb.finish(fbb.endTable());
          return object.objectBoxId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxReceiptItem()
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 4, '')
            ..price =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..regularPrice =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..quantity =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..barcode = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..taxable =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false)
            ..bottleDeposit =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..objectBoxId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ObjectBoxHistory] entity fields to define ObjectBox queries.
class ObjectBoxHistory_ {
  /// see [ObjectBoxHistory.upc]
  static final upc =
      QueryStringProperty<ObjectBoxHistory>(_entities[0].properties[0]);

  /// see [ObjectBoxHistory.dbHistory]
  static final dbHistory =
      QueryStringProperty<ObjectBoxHistory>(_entities[0].properties[1]);

  /// see [ObjectBoxHistory.objectBoxId]
  static final objectBoxId =
      QueryIntegerProperty<ObjectBoxHistory>(_entities[0].properties[2]);
}

/// [ObjectBoxShoppingItem] entity fields to define ObjectBox queries.
class ObjectBoxShoppingItem_ {
  /// see [ObjectBoxShoppingItem.upc]
  static final upc =
      QueryStringProperty<ObjectBoxShoppingItem>(_entities[1].properties[0]);

  /// see [ObjectBoxShoppingItem.checked]
  static final checked =
      QueryBooleanProperty<ObjectBoxShoppingItem>(_entities[1].properties[1]);

  /// see [ObjectBoxShoppingItem.objectBoxId]
  static final objectBoxId =
      QueryIntegerProperty<ObjectBoxShoppingItem>(_entities[1].properties[2]);
}

/// [ObjectBoxExpirationDate] entity fields to define ObjectBox queries.
class ObjectBoxExpirationDate_ {
  /// see [ObjectBoxExpirationDate.upc]
  static final upc =
      QueryStringProperty<ObjectBoxExpirationDate>(_entities[2].properties[0]);

  /// see [ObjectBoxExpirationDate.created]
  static final created =
      QueryIntegerProperty<ObjectBoxExpirationDate>(_entities[2].properties[1]);

  /// see [ObjectBoxExpirationDate.objectBoxId]
  static final objectBoxId =
      QueryIntegerProperty<ObjectBoxExpirationDate>(_entities[2].properties[2]);

  /// see [ObjectBoxExpirationDate.updated]
  static final updated =
      QueryIntegerProperty<ObjectBoxExpirationDate>(_entities[2].properties[3]);

  /// see [ObjectBoxExpirationDate.expirationDate]
  static final expirationDate =
      QueryIntegerProperty<ObjectBoxExpirationDate>(_entities[2].properties[4]);
}

/// [ObjectBoxHouseholdMember] entity fields to define ObjectBox queries.
class ObjectBoxHouseholdMember_ {
  /// see [ObjectBoxHouseholdMember.isAdmin]
  static final isAdmin = QueryBooleanProperty<ObjectBoxHouseholdMember>(
      _entities[3].properties[0]);

  /// see [ObjectBoxHouseholdMember.email]
  static final email =
      QueryStringProperty<ObjectBoxHouseholdMember>(_entities[3].properties[1]);

  /// see [ObjectBoxHouseholdMember.householdId]
  static final householdId =
      QueryStringProperty<ObjectBoxHouseholdMember>(_entities[3].properties[2]);

  /// see [ObjectBoxHouseholdMember.name]
  static final name =
      QueryStringProperty<ObjectBoxHouseholdMember>(_entities[3].properties[3]);

  /// see [ObjectBoxHouseholdMember.userId]
  static final userId =
      QueryStringProperty<ObjectBoxHouseholdMember>(_entities[3].properties[4]);

  /// see [ObjectBoxHouseholdMember.objectBoxId]
  static final objectBoxId = QueryIntegerProperty<ObjectBoxHouseholdMember>(
      _entities[3].properties[5]);

  /// see [ObjectBoxHouseholdMember.created]
  static final created = QueryIntegerProperty<ObjectBoxHouseholdMember>(
      _entities[3].properties[6]);

  /// see [ObjectBoxHouseholdMember.updated]
  static final updated = QueryIntegerProperty<ObjectBoxHouseholdMember>(
      _entities[3].properties[7]);
}

/// [ObjectBoxInventory] entity fields to define ObjectBox queries.
class ObjectBoxInventory_ {
  /// see [ObjectBoxInventory.amount]
  static final amount =
      QueryDoubleProperty<ObjectBoxInventory>(_entities[4].properties[0]);

  /// see [ObjectBoxInventory.unitCount]
  static final unitCount =
      QueryIntegerProperty<ObjectBoxInventory>(_entities[4].properties[1]);

  /// see [ObjectBoxInventory.lastUpdate]
  static final lastUpdate =
      QueryIntegerProperty<ObjectBoxInventory>(_entities[4].properties[2]);

  /// see [ObjectBoxInventory.locations]
  static final locations =
      QueryStringVectorProperty<ObjectBoxInventory>(_entities[4].properties[3]);

  /// see [ObjectBoxInventory.restock]
  static final restock =
      QueryBooleanProperty<ObjectBoxInventory>(_entities[4].properties[4]);

  /// see [ObjectBoxInventory.uid]
  static final uid =
      QueryStringProperty<ObjectBoxInventory>(_entities[4].properties[5]);

  /// see [ObjectBoxInventory.objectBoxId]
  static final objectBoxId =
      QueryIntegerProperty<ObjectBoxInventory>(_entities[4].properties[6]);

  /// see [ObjectBoxInventory.dbExpirationDates]
  static final dbExpirationDates =
      QueryStringVectorProperty<ObjectBoxInventory>(_entities[4].properties[7]);

  /// see [ObjectBoxInventory.dbLastUpdate]
  static final dbLastUpdate =
      QueryIntegerProperty<ObjectBoxInventory>(_entities[4].properties[8]);

  /// see [ObjectBoxInventory.upc]
  static final upc =
      QueryStringProperty<ObjectBoxInventory>(_entities[4].properties[9]);
}

/// [ObjectBoxItem] entity fields to define ObjectBox queries.
class ObjectBoxItem_ {
  /// see [ObjectBoxItem.upc]
  static final upc =
      QueryStringProperty<ObjectBoxItem>(_entities[5].properties[0]);

  /// see [ObjectBoxItem.name]
  static final name =
      QueryStringProperty<ObjectBoxItem>(_entities[5].properties[1]);

  /// see [ObjectBoxItem.variety]
  static final variety =
      QueryStringProperty<ObjectBoxItem>(_entities[5].properties[2]);

  /// see [ObjectBoxItem.category]
  static final category =
      QueryStringProperty<ObjectBoxItem>(_entities[5].properties[3]);

  /// see [ObjectBoxItem.type]
  static final type =
      QueryStringProperty<ObjectBoxItem>(_entities[5].properties[4]);

  /// see [ObjectBoxItem.typeId]
  static final typeId =
      QueryStringProperty<ObjectBoxItem>(_entities[5].properties[5]);

  /// see [ObjectBoxItem.unitCount]
  static final unitCount =
      QueryIntegerProperty<ObjectBoxItem>(_entities[5].properties[6]);

  /// see [ObjectBoxItem.unitName]
  static final unitName =
      QueryStringProperty<ObjectBoxItem>(_entities[5].properties[7]);

  /// see [ObjectBoxItem.unitPlural]
  static final unitPlural =
      QueryStringProperty<ObjectBoxItem>(_entities[5].properties[8]);

  /// see [ObjectBoxItem.imageUrl]
  static final imageUrl =
      QueryStringProperty<ObjectBoxItem>(_entities[5].properties[9]);

  /// see [ObjectBoxItem.consumable]
  static final consumable =
      QueryBooleanProperty<ObjectBoxItem>(_entities[5].properties[10]);

  /// see [ObjectBoxItem.languageCode]
  static final languageCode =
      QueryStringProperty<ObjectBoxItem>(_entities[5].properties[11]);

  /// see [ObjectBoxItem.lastUpdate]
  static final lastUpdate =
      QueryIntegerProperty<ObjectBoxItem>(_entities[5].properties[12]);

  /// see [ObjectBoxItem.objectBoxId]
  static final objectBoxId =
      QueryIntegerProperty<ObjectBoxItem>(_entities[5].properties[13]);

  /// see [ObjectBoxItem.uid]
  static final uid =
      QueryStringProperty<ObjectBoxItem>(_entities[5].properties[14]);
}

/// [ObjectBoxItemTranslation] entity fields to define ObjectBox queries.
class ObjectBoxItemTranslation_ {
  /// see [ObjectBoxItemTranslation.upc]
  static final upc =
      QueryStringProperty<ObjectBoxItemTranslation>(_entities[6].properties[0]);

  /// see [ObjectBoxItemTranslation.languageCode]
  static final languageCode =
      QueryStringProperty<ObjectBoxItemTranslation>(_entities[6].properties[1]);

  /// see [ObjectBoxItemTranslation.name]
  static final name =
      QueryStringProperty<ObjectBoxItemTranslation>(_entities[6].properties[2]);

  /// see [ObjectBoxItemTranslation.variety]
  static final variety =
      QueryStringProperty<ObjectBoxItemTranslation>(_entities[6].properties[3]);

  /// see [ObjectBoxItemTranslation.unitName]
  static final unitName =
      QueryStringProperty<ObjectBoxItemTranslation>(_entities[6].properties[4]);

  /// see [ObjectBoxItemTranslation.unitPlural]
  static final unitPlural =
      QueryStringProperty<ObjectBoxItemTranslation>(_entities[6].properties[5]);

  /// see [ObjectBoxItemTranslation.type]
  static final type =
      QueryStringProperty<ObjectBoxItemTranslation>(_entities[6].properties[6]);

  /// see [ObjectBoxItemTranslation.objectBoxId]
  static final objectBoxId = QueryIntegerProperty<ObjectBoxItemTranslation>(
      _entities[6].properties[7]);
}

/// [ObjectBoxLocation] entity fields to define ObjectBox queries.
class ObjectBoxLocation_ {
  /// see [ObjectBoxLocation.upc]
  static final upc =
      QueryStringProperty<ObjectBoxLocation>(_entities[7].properties[0]);

  /// see [ObjectBoxLocation.name]
  static final name =
      QueryStringProperty<ObjectBoxLocation>(_entities[7].properties[1]);

  /// see [ObjectBoxLocation.quantity]
  static final quantity =
      QueryDoubleProperty<ObjectBoxLocation>(_entities[7].properties[2]);

  /// see [ObjectBoxLocation.created]
  static final created =
      QueryIntegerProperty<ObjectBoxLocation>(_entities[7].properties[3]);

  /// see [ObjectBoxLocation.updated]
  static final updated =
      QueryIntegerProperty<ObjectBoxLocation>(_entities[7].properties[4]);

  /// see [ObjectBoxLocation.objectBoxId]
  static final objectBoxId =
      QueryIntegerProperty<ObjectBoxLocation>(_entities[7].properties[5]);
}

/// [ObjectBoxManufacturer] entity fields to define ObjectBox queries.
class ObjectBoxManufacturer_ {
  /// see [ObjectBoxManufacturer.name]
  static final name =
      QueryStringProperty<ObjectBoxManufacturer>(_entities[8].properties[0]);

  /// see [ObjectBoxManufacturer.website]
  static final website =
      QueryStringProperty<ObjectBoxManufacturer>(_entities[8].properties[1]);

  /// see [ObjectBoxManufacturer.uid]
  static final uid =
      QueryStringProperty<ObjectBoxManufacturer>(_entities[8].properties[2]);

  /// see [ObjectBoxManufacturer.parentName]
  static final parentName =
      QueryStringProperty<ObjectBoxManufacturer>(_entities[8].properties[3]);

  /// see [ObjectBoxManufacturer.parentUid]
  static final parentUid =
      QueryStringProperty<ObjectBoxManufacturer>(_entities[8].properties[4]);

  /// see [ObjectBoxManufacturer.objectBoxId]
  static final objectBoxId =
      QueryIntegerProperty<ObjectBoxManufacturer>(_entities[8].properties[5]);
}

/// [ObjectBoxProduct] entity fields to define ObjectBox queries.
class ObjectBoxProduct_ {
  /// see [ObjectBoxProduct.name]
  static final name =
      QueryStringProperty<ObjectBoxProduct>(_entities[9].properties[0]);

  /// see [ObjectBoxProduct.uid]
  static final uid =
      QueryStringProperty<ObjectBoxProduct>(_entities[9].properties[1]);

  /// see [ObjectBoxProduct.manufacturer]
  static final manufacturer =
      QueryStringProperty<ObjectBoxProduct>(_entities[9].properties[2]);

  /// see [ObjectBoxProduct.manufacturerUid]
  static final manufacturerUid =
      QueryStringProperty<ObjectBoxProduct>(_entities[9].properties[3]);

  /// see [ObjectBoxProduct.category]
  static final category =
      QueryStringProperty<ObjectBoxProduct>(_entities[9].properties[4]);

  /// see [ObjectBoxProduct.upcs]
  static final upcs =
      QueryStringVectorProperty<ObjectBoxProduct>(_entities[9].properties[5]);

  /// see [ObjectBoxProduct.objectBoxId]
  static final objectBoxId =
      QueryIntegerProperty<ObjectBoxProduct>(_entities[9].properties[6]);
}

/// [ObjectBoxItemIdentifier] entity fields to define ObjectBox queries.
class ObjectBoxItemIdentifier_ {
  /// see [ObjectBoxItemIdentifier.type]
  static final type =
      QueryStringProperty<ObjectBoxItemIdentifier>(_entities[10].properties[0]);

  /// see [ObjectBoxItemIdentifier.value]
  static final value =
      QueryStringProperty<ObjectBoxItemIdentifier>(_entities[10].properties[1]);

  /// see [ObjectBoxItemIdentifier.uid]
  static final uid =
      QueryStringProperty<ObjectBoxItemIdentifier>(_entities[10].properties[2]);

  /// see [ObjectBoxItemIdentifier.created]
  static final created = QueryIntegerProperty<ObjectBoxItemIdentifier>(
      _entities[10].properties[3]);

  /// see [ObjectBoxItemIdentifier.updated]
  static final updated = QueryIntegerProperty<ObjectBoxItemIdentifier>(
      _entities[10].properties[4]);

  /// see [ObjectBoxItemIdentifier.objectBoxId]
  static final objectBoxId = QueryIntegerProperty<ObjectBoxItemIdentifier>(
      _entities[10].properties[5]);
}

/// [ObjectBoxReceiptItem] entity fields to define ObjectBox queries.
class ObjectBoxReceiptItem_ {
  /// see [ObjectBoxReceiptItem.name]
  static final name =
      QueryStringProperty<ObjectBoxReceiptItem>(_entities[11].properties[0]);

  /// see [ObjectBoxReceiptItem.price]
  static final price =
      QueryDoubleProperty<ObjectBoxReceiptItem>(_entities[11].properties[1]);

  /// see [ObjectBoxReceiptItem.regularPrice]
  static final regularPrice =
      QueryDoubleProperty<ObjectBoxReceiptItem>(_entities[11].properties[2]);

  /// see [ObjectBoxReceiptItem.quantity]
  static final quantity =
      QueryIntegerProperty<ObjectBoxReceiptItem>(_entities[11].properties[3]);

  /// see [ObjectBoxReceiptItem.barcode]
  static final barcode =
      QueryStringProperty<ObjectBoxReceiptItem>(_entities[11].properties[4]);

  /// see [ObjectBoxReceiptItem.taxable]
  static final taxable =
      QueryBooleanProperty<ObjectBoxReceiptItem>(_entities[11].properties[5]);

  /// see [ObjectBoxReceiptItem.bottleDeposit]
  static final bottleDeposit =
      QueryDoubleProperty<ObjectBoxReceiptItem>(_entities[11].properties[6]);

  /// see [ObjectBoxReceiptItem.objectBoxId]
  static final objectBoxId =
      QueryIntegerProperty<ObjectBoxReceiptItem>(_entities[11].properties[7]);
}
